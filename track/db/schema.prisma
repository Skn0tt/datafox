// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

model TestRun {
  id                 String   @id @default(cuid())
  sessionFingerprint String
  dataset            Dataset  @relation(fields: [datasetId], references: [id])
  datasetId          Int
  date               DateTime
  payload            String
}

model Dataset {
  id             Int          @id @default(autoincrement())
  slug           String
  token          String       @unique
  organisation   Organisation @relation(fields: [organisationId], references: [id])
  organisationId Int
  testRuns       TestRun[]

  notificationMail String?

  @@unique([slug, organisationId])
}

model Organisation {
  id      Int    @id @default(autoincrement())
  slug    String @unique
  name    String
  owner   User   @relation(fields: [ownerId], references: [id])
  ownerId Int

  members  User[]    @relation(name: "OrganisationMembers")
  datasets Dataset[]
}

model User {
  id             Int      @id @default(autoincrement())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  name           String
  email          String   @unique
  hashedPassword String?
  role           String   @default("USER")

  profilePictureUrl String?

  tokens             Token[]
  sessions           Session[]
  ownedOrganisations Organisation[]

  organisations Organisation[] @relation(name: "OrganisationMembers")
}

model Session {
  id                 Int       @id @default(autoincrement())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?

  user   User? @relation(fields: [userId], references: [id])
  userId Int?
}

model Token {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  hashedToken String
  type        String
  // See note below about TokenType enum
  // type        TokenType
  expiresAt   DateTime
  sentTo      String

  user   User @relation(fields: [userId], references: [id])
  userId Int

  @@unique([hashedToken, type])
}

// NOTE: It's highly recommended to use an enum for the token type
//       but enums only work in Postgres.
//       See: https://blitzjs.com/docs/database-overview#switch-to-postgre-sql
// enum TokenType {
//   RESET_PASSWORD
// }
